//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `ELCourseViewController`.
    static let elCourseViewController = _R.storyboard.elCourseViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ELCourseViewController", bundle: ...)`
    static func elCourseViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.elCourseViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.id` struct is generated, and contains static references to accessibility identifiers.
  struct id {
    struct elCourseViewController {
      /// Accessibility identifier `TypeData`.
      static let typeData: String = "TypeData"
      /// Accessibility identifier `TypeName`.
      static let typeName: String = "TypeName"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 20 images.
  struct image {
    /// Image `AI`.
    static let aI = Rswift.ImageResource(bundle: R.hostingBundle, name: "AI")
    /// Image `Bars／icon／starSpace`.
    static let barsIconStarSpace = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bars／icon／starSpace")
    /// Image `Frame 1`.
    static let frame1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Frame 1")
    /// Image `Go`.
    static let go = Rswift.ImageResource(bundle: R.hostingBundle, name: "Go")
    /// Image `Html 5`.
    static let html5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Html 5")
    /// Image `Java`.
    static let java = Rswift.ImageResource(bundle: R.hostingBundle, name: "Java")
    /// Image `Python`.
    static let python = Rswift.ImageResource(bundle: R.hostingBundle, name: "Python")
    /// Image `Robot`.
    static let robot = Rswift.ImageResource(bundle: R.hostingBundle, name: "Robot")
    /// Image `icon／arrowDown32`.
    static let iconArrowDown32 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon／arrowDown32")
    /// Image `icon／arrowLeft32`.
    static let iconArrowLeft32 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon／arrowLeft32")
    /// Image `icon／arrowTop32`.
    static let iconArrowTop32 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon／arrowTop32")
    /// Image `icon／info32`.
    static let iconInfo32 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon／info32")
    /// Image `icon／search32`.
    static let iconSearch32 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon／search32")
    /// Image `tabbar_chat_enabled`.
    static let tabbar_chat_enabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_chat_enabled")
    /// Image `tabbar_chat`.
    static let tabbar_chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_chat")
    /// Image `tabbar_contact_enabled`.
    static let tabbar_contact_enabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_contact_enabled")
    /// Image `tabbar_contact`.
    static let tabbar_contact = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_contact")
    /// Image `tabbar_me_enabled`.
    static let tabbar_me_enabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_me_enabled")
    /// Image `tabbar_me`.
    static let tabbar_me = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_me")
    /// Image `yellowStar`.
    static let yellowStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "yellowStar")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AI", bundle: ..., traitCollection: ...)`
    static func aI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aI, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bars／icon／starSpace", bundle: ..., traitCollection: ...)`
    static func barsIconStarSpace(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barsIconStarSpace, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Frame 1", bundle: ..., traitCollection: ...)`
    static func frame1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.frame1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Go", bundle: ..., traitCollection: ...)`
    static func go(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.go, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Html 5", bundle: ..., traitCollection: ...)`
    static func html5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.html5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Java", bundle: ..., traitCollection: ...)`
    static func java(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.java, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Python", bundle: ..., traitCollection: ...)`
    static func python(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.python, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Robot", bundle: ..., traitCollection: ...)`
    static func robot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.robot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon／arrowDown32", bundle: ..., traitCollection: ...)`
    static func iconArrowDown32(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconArrowDown32, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon／arrowLeft32", bundle: ..., traitCollection: ...)`
    static func iconArrowLeft32(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconArrowLeft32, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon／arrowTop32", bundle: ..., traitCollection: ...)`
    static func iconArrowTop32(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconArrowTop32, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon／info32", bundle: ..., traitCollection: ...)`
    static func iconInfo32(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfo32, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon／search32", bundle: ..., traitCollection: ...)`
    static func iconSearch32(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSearch32, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_chat", bundle: ..., traitCollection: ...)`
    static func tabbar_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_chat_enabled", bundle: ..., traitCollection: ...)`
    static func tabbar_chat_enabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_chat_enabled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_contact", bundle: ..., traitCollection: ...)`
    static func tabbar_contact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_contact, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_contact_enabled", bundle: ..., traitCollection: ...)`
    static func tabbar_contact_enabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_contact_enabled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_me", bundle: ..., traitCollection: ...)`
    static func tabbar_me(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_me, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_me_enabled", bundle: ..., traitCollection: ...)`
    static func tabbar_me_enabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_me_enabled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yellowStar", bundle: ..., traitCollection: ...)`
    static func yellowStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yellowStar, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `TypeData`.
    static let typeData: Rswift.ReuseIdentifier<MenuDataListCell> = Rswift.ReuseIdentifier(identifier: "TypeData")
    /// Reuse identifier `TypeName`.
    static let typeName: Rswift.ReuseIdentifier<MenuListNameCell> = Rswift.ReuseIdentifier(identifier: "TypeName")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try elCourseViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct elCourseViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ELCourseViewController

      let bundle = R.hostingBundle
      let courseViewController = StoryboardViewControllerResource<ELCourseViewController>(identifier: "CourseViewController")
      let name = "ELCourseViewController"

      func courseViewController(_: Void = ()) -> ELCourseViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: courseViewController)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "paperplane") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'paperplane' is used in storyboard 'ELCourseViewController', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "terminal.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'terminal.fill' is used in storyboard 'ELCourseViewController', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "tray.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'tray.fill' is used in storyboard 'ELCourseViewController', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AccentColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AccentColor' is used in storyboard 'ELCourseViewController', but couldn't be loaded.") }
        }
        if _R.storyboard.elCourseViewController().courseViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'courseViewController' could not be loaded from storyboard 'ELCourseViewController' as 'ELCourseViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
